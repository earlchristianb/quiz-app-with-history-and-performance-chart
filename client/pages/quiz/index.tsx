import {  NextPage } from 'next'
import Head from 'next/head'
import axios from 'axios'
import  decode  from 'html-entities-decoder'
import React, { FC, useEffect, useState } from 'react'
import { RootStateOrAny, useDispatch, useSelector } from 'react-redux'
import BlankBg from '../../public/BlankBg.png'
import Image from 'next/image'
import { addQuizResult } from '../../components/store/quizResults-slice'
import {useRouter}from 'next/router'
import Paginate from 'react-paginate'
type quizItemsType = {
    question: string,
    correctAnswer: string,
    options: [string],
    userAnswer:string|null
}

export type newQuizResult = {
  category: string,
  difficulty: string,
  score: number|null,
  items:quizItemsType[]|[]
}
  

export const QuizScreen: NextPage = () => {
  const router = useRouter();
  const dispatch = useDispatch();
  const initialState = {
    category:"",
    difficulty:"",
    score:0,
    items:[]
  }
  const { category, categoryCode, difficulty } = useSelector((state: RootStateOrAny) => state.select);
  const [quizItems, setQuizItems] = useState<quizItemsType[]|null>();
  const [counter, setCounter] = useState<number>(0);
  const [currentScore, setCurrentScore] = useState<number>(0);
  const [newQuizResultsState, setNewQuizResultState] = useState<newQuizResult>(initialState);
  const [clicked, setClicked] = useState<boolean>(false);
  const [message, setMessage] = useState<string>("");
  const [visibility,setVisibility]=useState<boolean>(false)

 
  useEffect(() => {
    async function getQuiz() {
      const { data } = await axios.get(`https://opentdb.com/api.php?amount=10&category=${categoryCode}&difficulty=${difficulty}&type=multiple`);
      const questions = await data.results.map((items: any) => {
        let question = decode(items.question);
        let options = items.incorrect_answers;
        options.push(items.correct_answer);
        options.sort();
        let options2=options.map(item=>decode(item))
        
        return {
          question: question,
          correctAnswer: decode(items.correct_answer),
          options: options2
                
        }
      });

      let difficultyCapitalized = difficulty?.charAt(0).toUpperCase() + difficulty?.slice(1);

      setQuizItems(questions)
      setNewQuizResultState({
        ...newQuizResultsState,
        category: category,
        difficulty: difficultyCapitalized
      });
      
    }
    getQuiz();
  }, [category])
  useEffect(() => {
    setNewQuizResultState({
         ...newQuizResultsState,
         score: currentScore
       });
  },[currentScore])
 
  const handleNextorSubmit = async() => {
    
    
    if (counter < 9) setCounter(counter + 1);
   
   
    setClicked(false);
    setTimeout(() => {
      newQuizResultsState
    }, 2000)
    
    if (counter === 9) {
    
     dispatch(addQuizResult(newQuizResultsState));
      console.log('submitted');
      setCounter(0);
      setCurrentScore(0);
      setNewQuizResultState({ ...newQuizResultsState, score: 0 });
      router.push('/main');
    }
    
          
  }

  

  const handleChooseAnswer = (e: React.FormEvent<HTMLButtonElement>) => {
    e.preventDefault()
     if (e.currentTarget.value === quizItems[counter].correctAnswer) {
      console.log('correct');
      setCurrentScore(currentScore + 1);
       
      setMessage("Correct")
      
    } else {
      setMessage("Incorrect")
    }
    setClicked(true);
    setVisibility(true)
   
    

    const itemDetails: quizItemsType = {
      question: quizItems[counter].question,
      correctAnswer: quizItems[counter].correctAnswer,
      options: quizItems[counter].options,
      userAnswer:e.currentTarget.value
    }
    
    setNewQuizResultState({
      ...newQuizResultsState,
      items: [...newQuizResultsState.items, itemDetails],
    });
    console.log(newQuizResultsState)
    setTimeout(() => {
      setMessage("")
    },3000)
  }
  

  return (
    quizItems ? 
      <section className="h-screen w-full flex flex-col mx-auto  justify-center items-center z-0 m-auto relative p-2 ">
      <Image src={BlankBg} layout="fill" alt="Hero image" />
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        


      
        <main className='space-y-2 md:space-y-8  flex flex-col justify-center items-center p-2 m-auto relative'> 
          
        <h2 className='text-left text-slate-700 text-2xl'>Question {counter+1}</h2>
        <p className='text-2xl text-center'>{JSON.stringify(quizItems[counter].question)}</p>
        <div className='grid grid-cols-2 place-items-center place-content-center gap-4'>
            {quizItems[counter].options.map((option, i) => (
              <button disabled={clicked} onClick={handleChooseAnswer}
                className={` p-2 rounded-lg w-36 h-20 md:w-80 md:h-24 text-white text-sm md:text-xl font-medium 
               
                ${clicked === true && option === quizItems[counter].correctAnswer ? "bg-green-600" : "bg-blue-600"}
                 ${clicked ? "" : "hover:scale-105"} transition duration-750
                `}
                value={option} key={i}>{option}</button>
            ))
            
            }
            
          </div>
          <p className={`${visibility ? "block" : ""} ${message === "Correct" ? "text-green-600" : "text-red-600"} text-2xl font-semibold`}>{message}</p>
          <div className='flex flex-col justify-center items-center'>
              <button disabled={!clicked} className={`${counter < 9 ? "bg-white" : "bg-green-600"}
                ${clicked ? "animate-bounce" : "animate-none"}
                 duration-75 transition transform
        font-medium p-2 rounded-md`} type="button" onClick={handleNextorSubmit}>{counter < 9 ? "Next" : "Submit"}
            </button>
            <div className=' text-2xl font-medium'>
          Score: {currentScore }
        </div>
          </div>
        
       </main>
          
       
        
      </section> :  <div>....</div>
)
  
      
  
}




// export const QuizCard = ({question,correctAnswer,options}:quizItemsType) => {
//   <div className=''></div>
// }


// export const getStaticProps : GetServerSideProps = async () =>   {
//   const { data } = await axios.get("https://opentdb.com/api.php?amount=10&category=23&difficulty=medium&type=multiple");
//   const { results }: GetQuiz = data;
//   return {
//     props: {
//       results
//     },
//   }
// }





export default QuizScreen;



